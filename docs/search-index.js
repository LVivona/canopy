var searchIndex = new Map(JSON.parse('[["libcanopy",{"t":"PGIPNNNNNNNCNNNNNNNNNNNNNNNNNNNNNNNNNNOOOOOPPPPPPGPPPPNNNNNNNNNNN","n":["Leaf","Node","NodeRef","Parent","borrow","borrow_mut","children","clone","clone_into","clone_to_uninit","downgrade","error","expect_children","expect_leaf","expect_prev","expect_root","fmt","","from","","has_children","insert","insert_node","into","is_leaf","is_root","iter","leaf","parent","pop","prev","to_owned","to_string","try_from","try_into","type_id","upgrade","value","next","prev","","value","","AlreadyBorrowed","DowngradeNotParent","ExpectedALeafNode","ExpectedARootNode","ExpectedChildren","IllegalDowngradeWithChildren","NodeError","NotAParent","ParentNodeNotFound","ParentUpgradeNotAllowed","RootDowngradeNotAllowed","borrow","borrow_mut","eq","fmt","","from","into","to_string","try_from","try_into","type_id"],"q":[[0,"libcanopy"],[38,"libcanopy::Node"],[43,"libcanopy::error"],[65,"libcanopy::node"],[66,"core::clone"],[67,"core::result"],[68,"core::default"],[69,"core::fmt"],[70,"core::cell"],[71,"alloc::rc"],[72,"core::option"],[73,"core::marker"],[74,"alloc::string"],[75,"core::any"]],"i":"f``00000000`000000h1111111111111111111BlBn101Ab00000`000000000000000","f":"````{b{{b{c}}}{}}{{{b{d}}}{{b{dc}}}{}}{{{b{{f{c}}}}}{{b{{j{{h{c}}}}}}}{}}{{{b{{f{c}}}}}{{f{c}}}l}{{b{b{dc}}}n{}}{{bA`}n}{{{b{{h{c}}}}}{{Ad{nAb}}}{AfAhAh}}`{{{b{{f{c}}}}}{{Ad{{b{{j{{h{c}}}}}}Ab}}}{}}{{{b{{f{c}}}}}{{Ad{nAb}}}{}}{{{b{{f{c}}}}}{{Ad{{Al{{Aj{{f{c}}}}}}Ab}}}{}}1{{{b{{f{c}}}}{b{dAn}}}B`Ah}0{{{f{c}}}{{h{c}}}{}}{cc{}}{{{b{{f{c}}}}}Bb{}}{{{b{{h{c}}}}c}{{Ad{{h{c}}Ab}}}{AhAfl}}{{{b{{h{c}}}}{b{{h{c}}}}}{{Ad{nAb}}}{AhAfl}}{{}c{}}33{{{h{c}}}{{`{c}}}{}}{{c{Bd{{h{c}}}}}{{h{c}}}Ah}{c{{h{c}}}Ah}{{{b{{h{c}}}}{b{{h{c}}}}}{{Ad{BbAb}}}{AflBfAhAfl}}{{{b{{f{c}}}}}{{Bd{{Al{{Aj{{f{c}}}}}}}}}{}}{bc{}}{bBh}{c{{Ad{e}}}{}{}}{{}{{Ad{c}}}{}}{bBj}{{{b{{h{c}}}}{b{{h{c}}}}}{{Ad{nAb}}}{AhAflAh}}{{{b{{f{c}}}}}{{b{c}}}{}}````````````````{b{{b{c}}}{}}{{{b{d}}}{{b{dc}}}{}}{{{b{Ab}}{b{Ab}}}Bb}{{{b{Ab}}{b{dAn}}}B`}0{cc{}}{{}c{}};:98","D":"Dd","p":[[1,"reference",null,null,1],[0,"mut"],[6,"Node",0,65],[8,"NodeRef",0,65],[1,"slice"],[10,"Clone",66],[1,"unit"],[1,"u8"],[6,"NodeError",43],[6,"Result",67,null,1],[10,"Default",68],[10,"Debug",69],[5,"RefCell",70],[5,"Weak",71],[5,"Formatter",69],[8,"Result",69],[1,"bool"],[6,"Option",72,null,1],[10,"Copy",73],[5,"String",74],[5,"TypeId",75],[15,"Parent",38],[15,"Leaf",38]],"r":[[0,65],[1,65],[2,65],[3,65],[4,65],[5,65],[6,65],[7,65],[8,65],[9,65],[10,65],[12,65],[13,65],[14,65],[15,65],[16,65],[17,65],[18,65],[19,65],[20,65],[21,65],[22,65],[23,65],[24,65],[25,65],[26,65],[27,65],[28,65],[29,65],[30,65],[31,65],[32,65],[33,65],[34,65],[35,65],[36,65],[37,65]],"b":[[16,"impl-Debug-for-Node%3CT%3E"],[17,"impl-Display-for-Node%3CT%3E"],[57,"impl-Display-for-NodeError"],[58,"impl-Debug-for-NodeError"]],"c":"OjAAAAAAAAA=","e":"OzAAAAEAAB8ACwABAAAABAACAAgAAgAMAAAAEQACABsAAAAgAAQAJwAEADIAAAA3AAQAPgADAA==","P":[[4,"T"],[9,""],[10,"T"],[23,"U"],[24,"T"],[32,""],[33,"U,T"],[34,"U"],[35,""],[36,"T"],[56,""],[59,"T"],[60,"U"],[61,""],[62,"U,T"],[63,"U"],[64,""]]}]]'));
if (typeof exports !== 'undefined') exports.searchIndex = searchIndex;
else if (window.initSearch) window.initSearch(searchIndex);
//{"start":39,"fragment_lengths":[3083]}