searchState.loadedDescShard("canopy", 0, "Node is a tree data structure element which can either be …\nA reference-counted, mutable reference to a <code>Node&lt;T&gt;</code>. This …\nReturn\nReturn\nExpects the node to be a leaf, or returns an error.\nReturn\nExpects the node to be a root, or returns an error.\nReturns the argument unchanged.\nReturn\nInsert <code>Node</code> with value T within the <code>Node</code>\nCalls <code>U::from(self)</code>.\nCheck if node is <code>Leaf</code> instance\nCheck if node is specific <code>Node::Parent</code> instance that …\nCreate <code>Node::Leaf</code> instance\nCreate <code>Node::Parent</code> instance\nRemoves a child node from its parent <code>Node::Parent</code>.\nReturns\nConverts a <code>Node::Leaf</code> node into a <code>Node::Parent</code> node with …\nReturn\nRaised when trying to mutate a parent node that is already …\nRaised when an attempt to downgrade a node that is not a …\nRaised when a leaf node is expected but a different type …\nRaised when a root node is expected but a different type …\nRaised when children are expected\nRaised when parent still has children within it’s …\nRepresents the different errors that can occur while …\nRaised when a parent node is expected but a different type …\nRaised when they expected the a parent to be there\nRaise when attempting to upgrade node, which is a not …\nRaised when attempting to downgrade a root node, which is …\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.")